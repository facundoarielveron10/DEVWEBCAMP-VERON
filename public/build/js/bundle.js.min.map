{"version":3,"sources":["app.js","horas.js","ponentes.js","tags.js"],"names":["menu","document","querySelector","sidebar","addEventListener","e","classList","toggle","busqueda","categoria_id","dia","categoria","dias","querySelectorAll","inputHiddenDia","inputHiddenHora","terminoBusqueda","target","name","value","horaPrevia","remove","Object","values","includes","async","url","resultados","fetch","eventos","listadoHoras","forEach","li","add","horasTomadas","map","evento","hora_id","listadoHorasArray","Array","from","filter","dataset","horaId","hora","seleccionarHora","obtenerHorasDisponibles","json","buscarEventos","contains","ponentesInput","ponentes","ponentesFiltrados","listadoPonentes","ponenteHidden","seleccionarPonente","ponente","ponentePrevio","ponenteId","respuesta","arrayPonentes","nombre","trim","apellido","id","formatearPonentes","obtenerPonentes","length","expresion","RegExp","toLowerCase","search","firstChild","removeChild","ponenteHTML","createElement","textContent","onclick","appendChild","noResultados","mostrarPonentes","tagsInput","tagsDiv","tagsInputHidden","tags","mostrarTags","tag","etiqueta","ondblclick","eliminarTag","actualizarInputHidden","toString","split","keyCode","preventDefault"],"mappings":"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","file":"bundle.js","sourcesContent":["// Menu de Hamburguesa\r\nconst menu = document.querySelector('.dashboard__hamburguesa--icono');\r\nconst sidebar = document.querySelector('.dashboard__sidebar');\r\nmenu.addEventListener('click', (e) => {\r\n    sidebar.classList.toggle('mostrar');\r\n});","(function() {\r\n    // Seleccionamos las horas\r\n    const horas = document.querySelector('#horas');\r\n\r\n    // Verificamos la existencia de esas horas\r\n    if (horas) {\r\n        // Buscamos las horas disponibles\r\n        let busqueda = {\r\n            categoria_id: '',\r\n            dia: ''\r\n        }\r\n\r\n        // Seleccionamos la categoria\r\n        const categoria = document.querySelector('[name=\"categoria_id\"]');\r\n        // Seleccionamos los dias\r\n        const dias = document.querySelectorAll('[name=\"dia\"]');\r\n        const inputHiddenDia = document.querySelector('[name=\"dia_id\"]');\r\n        const inputHiddenHora = document.querySelector('[name=\"hora_id\"]');\r\n        \r\n        // Guardamos en busqueda la categoria\r\n        categoria.addEventListener('change', terminoBusqueda);\r\n        // Guardamos en busqueda el dia\r\n        dias.forEach( dia => dia.addEventListener('change', terminoBusqueda));\r\n\r\n        // Guarda los datos seleccionados por el usuario\r\n        function terminoBusqueda(e) {\r\n            // Guardamos el dia y la categoria seleccionadas por el usuario\r\n            busqueda[e.target.name] = e.target.value;\r\n\r\n            // Reiniciar los campos ocultos y el selector de horas\r\n            inputHiddenHora.value = '';\r\n            inputHiddenDia.value = '';\r\n\r\n            const horaPrevia = document.querySelector('.horas__hora--seleccionada');\r\n            if (horaPrevia) {\r\n                horaPrevia.classList.remove('horas__hora--seleccionada');\r\n            }\r\n\r\n            // Nos aseguramos que el objeto busqueda este lleno\r\n            if (Object.values(busqueda).includes('')) {\r\n                return;\r\n            }\r\n            // Buscamos los eventos con esa categoria y ese dia\r\n            buscarEventos();\r\n        }\r\n\r\n        // Busca el evento con una categoria y dia especificos\r\n        async function buscarEventos() {\r\n            // Extraemos el dia y la categoria\r\n            const { dia , categoria_id } = busqueda;\r\n            // URL para la peticion\r\n            const url = `/api/eventos-horario?dia_id=${dia}&categoria_id=${categoria_id}`;\r\n            \r\n            // Nos traemos nos resultados\r\n            const resultados = await fetch(url);\r\n            const eventos = await resultados.json();\r\n\r\n            // Nos dice que horas estan disponibles para los eventos\r\n            obtenerHorasDisponibles(eventos);\r\n        }\r\n\r\n        // Nos indica que horas podemos seleccionar de todas las que hay\r\n        function obtenerHorasDisponibles(eventos) {\r\n            // Reiniciar las horas\r\n            const listadoHoras = document.querySelectorAll('#horas li');\r\n            listadoHoras.forEach(li => li.classList.add('horas__hora--deshabilitada'));\r\n            \r\n            // Comprobar eventos ya tomados, y quitar la variable de deshabilitados\r\n            const horasTomadas = eventos.map( evento => evento.hora_id);\r\n\r\n            // Transformamos el nodeList de listadoHoras a un Array\r\n            const listadoHorasArray = Array.from(listadoHoras);\r\n            \r\n            // Nos guardamos las horas que no han sido tomadas\r\n            const horasDisponibles = listadoHorasArray.filter( li => !horasTomadas.includes(li.dataset.horaId));\r\n            \r\n            horasDisponibles.forEach(li => li.classList.remove('horas__hora--deshabilitada'));\r\n\r\n            // Seleccionamos las horas disponibles\r\n            const horas = document.querySelectorAll('#horas li:not(.horas__hora--deshabilitada)');\r\n\r\n            // Seleccionamos una hora de las disponibles\r\n            horas.forEach( hora => hora.addEventListener('click', seleccionarHora));\r\n        }\r\n\r\n        // Selecciona una hora de las disponibles\r\n        function seleccionarHora(e) {\r\n            // Si hay horas tomadas no permite seleccionarlas\r\n            if (e.target.classList.contains('horas__hora--deshabilitada')) {\r\n                return;\r\n            }\r\n\r\n            // Desabilitar la hora previa, si hay un nuevo click\r\n            const horaPrevia = document.querySelector('.horas__hora--seleccionada');\r\n            if (horaPrevia) {\r\n                horaPrevia.classList.remove('horas__hora--seleccionada');\r\n            }\r\n\r\n            // Agregar una clase de seleccionado a la hora seleccionada\r\n            e.target.classList.add('horas__hora--seleccionada');\r\n\r\n            // Agrega la hora seleccionada al input de tipo hidden\r\n            inputHiddenHora.value = e.target.dataset.horaId;\r\n\r\n            // Llenar el campo oculto de dia\r\n            inputHiddenDia.value = document.querySelector('[name=\"dia\"]:checked').value;\r\n        }\r\n    }\r\n})();","(function(){\r\n    // Seleccionamos el input de ponentes\r\n    const ponentesInput = document.querySelector('#ponentes');\r\n    \r\n    // Si existe los ponentes\r\n    if (ponentesInput) {\r\n        // Datos necesarios para los ponentes\r\n        let ponentes = [];\r\n        let ponentesFiltrados = [];\r\n\r\n        // Seleccionamos el listado de los ponentes\r\n        const listadoPonentes = document.querySelector('#listado-ponentes');\r\n        // Seleccionamos el input de ponente\r\n        const ponenteHidden = document.querySelector('[name=\"ponente_id\"]');\r\n\r\n\r\n        // Nos traemos todos los ponentes\r\n        obtenerPonentes();\r\n\r\n        // Cada vez que se ingrese algo en el input buscamos un ponente\r\n        ponentesInput.addEventListener('input', buscarPonentes);\r\n\r\n        // Se trae todos los ponentes atraves de una API\r\n        async function obtenerPonentes() {\r\n            // URL para la peticion\r\n            const url = `/api/ponentes`;\r\n            \r\n            // Nos traemos nos resultados\r\n            const respuesta = await fetch(url);\r\n            const resultado = await respuesta.json();\r\n\r\n            formatearPonentes(resultado);\r\n        }\r\n\r\n        // Formatea los Ponentes, es decir quitarles datos irrelevantes\r\n        function formatearPonentes(arrayPonentes = []) {\r\n            ponentes = arrayPonentes.map(ponente => {\r\n                return {\r\n                    nombre: `${ponente.nombre.trim()} ${ponente.apellido.trim()}`,\r\n                    id: ponente.id\r\n                }\r\n            });\r\n        }\r\n\r\n        // Busca un ponente con lo ingresado en el input\r\n        function buscarPonentes(e) {\r\n            // Guardamos lo escrito por el usuario\r\n            const busqueda = e.target.value;\r\n\r\n            if (busqueda.length > 3) {\r\n                // Nos busca en mayuscula o minuscula no importa lo ingresado\r\n                const expresion = new RegExp(busqueda, 'i');\r\n                ponentesFiltrados = ponentes.filter(ponente => {\r\n                    if (ponente.nombre.toLowerCase().search(expresion) != -1) {\r\n                        return ponente;\r\n                    }\r\n                });\r\n            } else {\r\n                ponentesFiltrados = [];\r\n            }\r\n            \r\n            // Mostramos los ponentes filtrados\r\n            mostrarPonentes();\r\n        }\r\n\r\n        // Muestra una lista con los ponentes filtrados\r\n        function mostrarPonentes() {\r\n            // Limpiamos los registros previos\r\n            while(listadoPonentes.firstChild) {\r\n                listadoPonentes.removeChild(listadoPonentes.firstChild);\r\n            }\r\n\r\n            // Si hay algo en ponentes filtrados entonces mostralos\r\n            if (ponentesFiltrados.length > 0) {\r\n                ponentesFiltrados.forEach(ponente => {\r\n                    // Creamos el listado con HTML\r\n                    const ponenteHTML = document.createElement('LI');\r\n                    ponenteHTML.classList.add('listado-ponentes__ponente');\r\n                    ponenteHTML.textContent = ponente.nombre;\r\n                    ponenteHTML.dataset.ponenteId = ponente.id;\r\n                    ponenteHTML.onclick = seleccionarPonente;\r\n    \r\n                    // Añadir al DOM\r\n                    listadoPonentes.appendChild(ponenteHTML);\r\n                });\r\n            } else {\r\n                // No se pudieron encontrar resultados\r\n                const noResultados = document.createElement('P');\r\n                noResultados.classList.add('listado-ponentes__no-resultado');\r\n                noResultados.textContent = 'No hay resultado para tu busqueda';\r\n                listadoPonentes.appendChild(noResultados);\r\n            }\r\n        }\r\n\r\n        // Hace visible para el usuario el ponente seleccionado\r\n        function seleccionarPonente(e) {\r\n            // Seleccionamos el ponente\r\n            const ponente = e.target;\r\n\r\n            // Removemos la clase previa\r\n            const ponentePrevio = document.querySelector('.listado-ponentes__ponente--seleccionado');\r\n            if (ponentePrevio) {\r\n                ponentePrevio.classList.remove('listado-ponentes__ponente--seleccionado');\r\n            }\r\n\r\n            // Le agregamos la clase que lo resalta\r\n            ponente.classList.add('listado-ponentes__ponente--seleccionado');\r\n\r\n            ponenteHidden.value = ponente.dataset.ponenteId;\r\n        }\r\n    }\r\n})();","(function() {\r\n    // Seleccionamos el input para escribir los tags\r\n    const tagsInput = document.querySelector('#tags_input');\r\n    // Si existe el input para los tag\r\n    if (tagsInput) {\r\n        // Seleccionamos todos los divs que contienen los tags\r\n        const tagsDiv = document.querySelector('#tags');\r\n        \r\n        // Seleccionamos el input hiddent\r\n        const tagsInputHidden = document.querySelector('[name=\"tags\"]');\r\n        \r\n        // Guardamos las etiquetas en un arreglo\r\n        let tags = [];\r\n        \r\n        // Recuperar del input oculto los datos\r\n        if (tagsInputHidden.value !== '') {\r\n            tags = tagsInputHidden.value.split(',');\r\n            mostrarTags();\r\n        }\r\n        \r\n        // Escuchar los cambios en el input\r\n        tagsInput.addEventListener('keypress', guardarTag);\r\n        \r\n        // Mira si el usuario esta escribiendo algo en el input\r\n        function guardarTag(e) {\r\n            if (e.keyCode === 44) {\r\n                // Si enviamos el input vacio\r\n                if (e.target.value.trim() === '' || e.target.value.trim() < 1) {\r\n                    return;\r\n                }\r\n                // Colocamos por default el input\r\n                e.preventDefault();\r\n                // Vamos guardando los tags\r\n                tags = [...tags, e.target.value.trim()];\r\n                // Limpiamos el input\r\n                tagsInput.value = '';\r\n\r\n                // Mostramos los tags\r\n                mostrarTags();\r\n            }\r\n        }\r\n\r\n        // Muestra todos los tags ingresados por el usuario\r\n        function mostrarTags() {\r\n            tagsDiv.textContent = '';\r\n            tags.forEach(tag => {\r\n                // Creamos la etiqueta\r\n                const etiqueta = document.createElement('LI');\r\n                // Le agregamos una clase para darle estilo\r\n                etiqueta.classList.add('formulario__tag');\r\n                // Le agregamos el contenido a la etiqueta\r\n                etiqueta.textContent = tag;\r\n                etiqueta.ondblclick = eliminarTag;\r\n                // Mostramos la etiqueta en el DOM\r\n                tagsDiv.appendChild(etiqueta);\r\n            });\r\n            \r\n            actualizarInputHidden();\r\n        }\r\n\r\n        // Actualiza el input al agregar y quitar etiquetas del arreglo\r\n        function actualizarInputHidden() {\r\n            tagsInputHidden.value = tags.toString();\r\n        }\r\n\r\n        // Elimina un tag\r\n        function eliminarTag(e) {\r\n            e.target.remove();\r\n            tags = tags.filter(tag => tag !== e.target.textContent);\r\n            actualizarInputHidden();\r\n        }\r\n    }\r\n})();"]}